/**
 * Copyright 2015-2115 the original author or authors.
 *
 * Licensed under the MIT Licensed
 *
 * @email   dragonmail2001@163.com
 * @author  jinglong.zhaijl
 * @date    2015-10-24
 * @Source: https://github.com/dragonmail2001
 *
 */
var ghost = require(process.argv[2]+'/sdcm-test-api/cfg/ghost.js'); 
var gapi = require(process.argv[2]+'/sdcm-test-api/cmn/gapi.js');
var rdis = require(process.argv[2]+'/sdcm-test-api/cmn/rdis.js');

async function sleep (time) {
  return new Promise((resolve) => setTimeout(resolve, time));
}

/**
 * 本例子用来演示给容器做压力测试，切记如果要验证压力需要把sdcm.conf.js
 * 中的debug: false 改为true
 *  
 * 本例不请求任何后端接口所以itfs配置为空，并且func函数返回{jump:true}
 * 如果需要连带后端服务做压力测试需要配置itfs并且func返回函数要做对应处理
 *
 */
class PerformanceTesting extends gapi.Objc {
    constructor() {
        super();      
    }   

    conf() {
        return {
            auth : false,
            type : "json",
            itfs : [{}]
        };
    }

    async func(req,res,fld,fle) {
        this.log(this.conf(), {ctx:req}, 'req')

        let data = {
            jump: true
        };
        
        this.log(this.conf(), {dat:data,ctx:req} , 'java-in');
        return data;
    }

    async outc(req, res, fld, fle) {
        const rslt = this.rslt(req, 'PerformanceTesting');

        //let value = await rdis.getByKey("zjl");
        rslt.objv = "haha";
        //console.log(value);
        const name   = this.getParameter(req, 'name');
        if(name != null) {
            await sleep(30000);console.log("=========>>name"+name);
        }
        this.log(this.conf(), {dat:rslt,ctx:req} , 'java-out');
        return rslt.objv;
    }
}

//必须放在文件的最后面
exports = module.exports = PerformanceTesting;